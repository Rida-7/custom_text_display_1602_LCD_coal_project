
AVRASM ver. 2.2.8  E:\gh\coalProject\coalProject\main.asm Wed Jan 03 10:46:31 2024

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
E:\gh\coalProject\coalProject\main.asm(1): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328pdef.inc'
E:\gh\coalProject\coalProject\main.asm(2): Including file 'E:\gh\coalProject\coalProject\delay.inc'
E:\gh\coalProject\coalProject\main.asm(3): Including file 'E:\gh\coalProject\coalProject\lcd_Macros.inc'
E:\gh\coalProject\coalProject\main.asm(4): Including file 'E:\gh\coalProject\coalProject\UART_Macros.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
E:\gh\coalProject\coalProject\main.asm(1): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328pdef.inc'
E:\gh\coalProject\coalProject\main.asm(2): Including file 'E:\gh\coalProject\coalProject\delay.inc'
E:\gh\coalProject\coalProject\main.asm(3): Including file 'E:\gh\coalProject\coalProject\lcd_Macros.inc'
E:\gh\coalProject\coalProject\main.asm(4): Including file 'E:\gh\coalProject\coalProject\UART_Macros.inc'
                                 
                                 .include "m328pdef.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 .include "delay.inc"
                                 
                                 .macro delay
                                 	push r18
                                 	push r24
                                 	push r25
                                 	ldi r18,@0/10
                                 	L1:
                                 	ldi r24,LOW(39998) ; intialize inner loop count in inner
                                 	ldi r25,HIGH(39998) ; loop high and low registers
                                 	L2:
                                 	sbiw r24,1 ; decrement inner loop registers
                                 	brne L2 ; branch to L2 if iLoop registers != 0
                                 	dec r18 ; decrement outer loop register
                                 	brne L1 ; branch to L1 if outer loop register != 0
                                 	nop ; no operation
                                 	pop r25
                                 	pop r24
                                 	pop r18
                                 .include "lcd_Macros.inc"
                                 
                                 
                                 ; [List of all the available macros in this file]
                                 ;	LCD_init
                                 ;	LCD_backlight_OFF
                                 ;	LCD_backlight_ON
                                 ;	LCD_send_a_command
                                 ;	LCD_send_a_character
                                 ;   LCD_send_a_reg_ASCII
                                 ;	LCD_send_a_register
                                 ;	LCD_send_a_string
                                 ;	LCD_LCD_clear
                                 ;	LCD_LCD_home
                                 ;	div
                                 
                                 
                                 ;Data Pin Connections for 16x2 LCD
                                 ; [LCD pins]          [Arduino UNO Pins]
                                 ;   RS   ---------------  8 (PB0)
                                 ;   E    ---------------  9 (PB1)
                                 ;   D4   ---------------  4 (PD4)
                                 ;   D5   ---------------  5 (PD5)
                                 ;   D6   ---------------  6 (PD6)
                                 ;   D7   ---------------  7 (PD7)
                                 ;   A   ----------------  13 (PB5)	; Anode pin of LCD Backlight LED
                                 
                                 
                                 ; Macro to initilize the 16x2 LCD
                                 .macro LCD_init
                                 	; Setting pins to Output for LCD
                                 	sbi DDRD,PD4 ; D4
                                 	sbi DDRD,PD5 ; D5
                                 	sbi DDRD,PD6 ; D6
                                 	sbi DDRD,PD7 ; D7
                                 	;Setting LCD Mode selection pins
                                 	sbi DDRB,PB0 ; RS pin of LCD
                                 	sbi DDRB,PB1 ; E pin of LCD
                                 	;Setting LCD Backlight pin
                                 	sbi DDRB,PB5 ; LCD Backlight control pin (BLA or A pin of LCD)
                                 
                                 	; SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
                                 	; according to datasheet, we need at least 40 ms after power rises above 2.7 V
                                 	; before sending commands. Arduino can turn on way before 4.5 V so we'll wait 50ms
                                 	delay 50
                                 	
                                 	; Now we pull both RS and E pins LOW to begin commands
                                 	cbi PORTB, PB0 ; RS pin of LCD
                                 	cbi PORTB, PB1 ; E pin of LCD
                                 
                                 	; put the LCD into 4 bit or 8 bit mode
                                 	; this is according to the Hitachi HD44780 datasheet
                                 	; figure 24, pg 46
                                 	
                                 	; we start in 8bit mode, try to set 4 bit mode
                                 	LCD_send_a_command 0x03
                                 	delay 5	; wait min 4.1ms
                                 
                                 	; second try
                                 	LCD_send_a_command 0x03
                                 	delay 5	; wait min 4.1ms
                                 		
                                 	; third go!
                                 	LCD_send_a_command 0x03
                                 	delay 1
                                 	
                                 	; finally, set to 4-bit interface
                                 	LCD_send_a_command 0x02
                                 
                                 	; finally, set # lines, font size, etc.
                                 	LCD_send_a_command 0x28
                                 
                                 	; turn the display on with no cursor or blinking default
                                 	LCD_send_a_command 0x0C
                                 	
                                 	; clear it off
                                 	LCD_clear
                                 
                                 	; Initialize to default text direction
                                 	LCD_send_a_command 0x06
                                 .endmacro
                                 
                                 ; Macro to clear the LCD
                                 .macro LCD_clear
                                 	LCD_send_a_command 0x01
                                 	delay 10  ; this command takes a long time!
                                 .endmacro
                                 
                                 ; Macro to set LCD cursor position to zero
                                 .macro LCD_home
                                 	LCD_send_a_command 0x02
                                 	delay 10  ; this command takes a long time!
                                 .endmacro
                                 
                                 ; Macro to Turn OFF the LCD Backlight
                                 .macro LCD_backlight_OFF
                                 	cbi PORTB,PB5 ; Backlight OFF
                                 .endmacro
                                 
                                 ; Macro to Turn ON the LCD Backlight
                                 .macro LCD_backlight_ON
                                 	sbi PORTB,PB5 ; Backlight ON
                                 .endmacro
                                 
                                 ; Macro to send a command to control the LCD
                                 ; Usage Example: LCD_send_a_command 0x01
                                 ; all the supported commands are writtern at the end of this file
                                 .macro LCD_send_a_command
                                 	PUSH r16
                                 	LDI r16,@0			; receives the command
                                 	; Clear the pins
                                 	CBI PORTD, PD7         ; Clear PD7
                                 	CBI PORTD, PD6         ; Clear PD6
                                 	CBI PORTD, PD5         ; Clear PD5
                                 	CBI PORTD, PD4         ; Clear PD4
                                 	CBI PORTB, PB0         ; Set RS pin to LOW (set LCD mode to "Command Mode")
                                 	; Send the upper 4 bits of the Command to LCD
                                 	SBRC r16, 7            ; Check the MSB (7th bit)
                                 	SBI PORTD, PD7         ; Set PD7 according to the command bit
                                 	SBRC r16, 6            ; Check the 6th bit
                                 	SBI PORTD, PD6         ; Set PD6 according to the command bit
                                 	SBRC r16, 5            ; Check the 5th bit
                                 	SBI PORTD, PD5         ; Set PD5 according to the command bit
                                 	SBRC r16, 4            ; Check the 4th bit
                                 	SBI PORTD, PD4         ; Set PD4 according to the command bit
                                 
                                 	SBI PORTB, PB1         ; Set E pin to HIGH (set LCD to receive the command)
                                 	delay 10
                                 	CBI PORTB, PB1         ; Set E pin to LOW (set LCD to process the command)
                                 
                                 	; Clear the pins
                                 	CBI PORTD, PD7         ; Clear PD7
                                 	CBI PORTD, PD6         ; Clear PD6
                                 	CBI PORTD, PD5         ; Clear PD5
                                 	CBI PORTD, PD4         ; Clear PD4
                                 
                                 	; Send the lower 4 bits of the Command to LCD
                                 	SBRC r16, 3            ; Check the 3rd bit
                                 	SBI PORTD, PD7         ; Set PD7 according to the command bit
                                 	SBRC r16, 2            ; Check the 2nd bit
                                 	SBI PORTD, PD6         ; Set PD6 according to the command bit
                                 	SBRC r16, 1            ; Check the 1st bit
                                 	SBI PORTD, PD5         ; Set PD5 according to the command bit
                                 	SBRC r16, 0            ; Check the 0th bit
                                 	SBI PORTD, PD4         ; Set PD4 according to the command bit
                                 
                                 	SBI PORTB, PB1         ; Set E pin to HIGH (set LCD to receive the command)
                                 	delay 10
                                 	CBI PORTB, PB1         ; Set E pin to LOW (set LCD to process the command)
                                 
                                 	; Clear the pins
                                 	CBI PORTD, PD7         ; Clear PD7
                                 	CBI PORTD, PD6         ; Clear PD6
                                 	CBI PORTD, PD5         ; Clear PD5
                                 	CBI PORTD, PD4         ; Clear PD4
                                 	
                                 	POP r16
                                 .endmacro
                                 
                                 ; Macro to send a single character to display on the LCD
                                 ; Usage Example: LCD_send_a_character 'A'
                                 .macro LCD_send_a_character
                                 	PUSH r16
                                 	LDI r16,@0			; receives the character
                                 	; Clear the pins
                                 	CBI PORTD, PD7         ; Clear PD7
                                 	CBI PORTD, PD6         ; Clear PD6
                                 	CBI PORTD, PD5         ; Clear PD5
                                 	CBI PORTD, PD4         ; Clear PD4
                                 	SBI PORTB, PB0         ; Set RS pin to HIGH (set LCD mode to "Data Mode")
                                 	; Send the upper 4 bits of the Character to LCD
                                 	SBRC r16, 7            ; Check the MSB (7th bit)
                                 	SBI PORTD, PD7         ; Set PD7 according to the data bit
                                 	SBRC r16, 6            ; Check the 6th bit
                                 	SBI PORTD, PD6         ; Set PD6 according to the data bit
                                 	SBRC r16, 5            ; Check the 5th bit
                                 	SBI PORTD, PD5         ; Set PD5 according to the data bit
                                 	SBRC r16, 4            ; Check the 4th bit
                                 	SBI PORTD, PD4         ; Set PD4 according to the data bit
                                 
                                 	SBI PORTB, PB1         ; Set E pin to HIGH (set LCD to receive the data)
                                 	delay 10
                                 	CBI PORTB, PB1         ; Set E pin to LOW (set LCD to process the data)
                                 
                                 	; Clear the pins
                                 	CBI PORTD, PD7         ; Clear PD7
                                 	CBI PORTD, PD6         ; Clear PD6
                                 	CBI PORTD, PD5         ; Clear PD5
                                 	CBI PORTD, PD4         ; Clear PD4
                                 
                                 	; Send the lower 4 bits of the Character to LCD
                                 	SBRC r16, 3            ; Check the 3rd bit
                                 	SBI PORTD, PD7         ; Set PD7 according to the data bit
                                 	SBRC r16, 2            ; Check the 2nd bit
                                 	SBI PORTD, PD6         ; Set PD6 according to the data bit
                                 	SBRC r16, 1            ; Check the 1st bit
                                 	SBI PORTD, PD5         ; Set PD5 according to the data bit
                                 	SBRC r16, 0            ; Check the 0th bit
                                 	SBI PORTD, PD4         ; Set PD4 according to the data bit
                                 
                                 	SBI PORTB, PB1         ; Set E pin to HIGH (set LCD to receive the data)
                                 	delay 10
                                 	CBI PORTB, PB1         ; Set E pin to LOW (set LCD to process the data)
                                 
                                 	; Clear the pins
                                 	CBI PORTD, PD7         ; Clear PD7
                                 	CBI PORTD, PD6         ; Clear PD6
                                 	CBI PORTD, PD5         ; Clear PD5
                                 	CBI PORTD, PD4         ; Clear PD4
                                 	
                                 	POP r16
                                 .endmacro
                                 
                                 
                                 ; Macro to send a register to display its value on the LCD
                                 ; Usage Example: LCD_send_a_reg_ASCII r16
                                 .macro LCD_send_a_reg_ASCII
                                 	PUSH r16
                                 	mov r16,@0			; receives the character
                                 	; Clear the pins
                                 	CBI PORTD, PD7         ; Clear PD7
                                 	CBI PORTD, PD6         ; Clear PD6
                                 	CBI PORTD, PD5         ; Clear PD5
                                 	CBI PORTD, PD4         ; Clear PD4
                                 	; Send the upper 4 bits of the Character to LCD
                                 	SBRC r16, 7            ; Check the MSB (7th bit)
                                 	SBI PORTD, PD7         ; Set PD7 according to the data bit
                                 	SBRC r16, 6            ; Check the 6th bit
                                 	SBI PORTD, PD6         ; Set PD6 according to the data bit
                                 	SBRC r16, 5            ; Check the 5th bit
                                 	SBI PORTD, PD5         ; Set PD5 according to the data bit
                                 	SBRC r16, 4            ; Check the 4th bit
                                 	SBI PORTD, PD4         ; Set PD4 according to the data bit
                                 
                                 	SBI PORTB, PB0         ; Set RS pin to HIGH (set LCD mode to "Data Mode")
                                 	SBI PORTB, PB1         ; Set E pin to HIGH (set LCD to receive the data)
                                 	delay 10
                                 	CBI PORTB, PB1         ; Set E pin to LOW (set LCD to process the data)
                                 
                                 	; Clear the pins
                                 	CBI PORTD, PD7         ; Clear PD7
                                 	CBI PORTD, PD6         ; Clear PD6
                                 	CBI PORTD, PD5         ; Clear PD5
                                 	CBI PORTD, PD4         ; Clear PD4
                                 
                                 	; Send the lower 4 bits of the Character to LCD
                                 	SBRC r16, 3            ; Check the 3rd bit
                                 	SBI PORTD, PD7         ; Set PD7 according to the data bit
                                 	SBRC r16, 2            ; Check the 2nd bit
                                 	SBI PORTD, PD6         ; Set PD6 according to the data bit
                                 	SBRC r16, 1            ; Check the 1st bit
                                 	SBI PORTD, PD5         ; Set PD5 according to the data bit
                                 	SBRC r16, 0            ; Check the 0th bit
                                 	SBI PORTD, PD4         ; Set PD4 according to the data bit
                                 
                                 	SBI PORTB, PB1         ; Set E pin to HIGH (set LCD to receive the data)
                                 	delay 10
                                 	CBI PORTB, PB1         ; Set E pin to LOW (set LCD to process the data)
                                 
                                 	; Clear the pins
                                 	CBI PORTD, PD7         ; Clear PD7
                                 	CBI PORTD, PD6         ; Clear PD6
                                 	CBI PORTD, PD5         ; Clear PD5
                                 	CBI PORTD, PD4         ; Clear PD4
                                 	
                                 	POP r16
                                 .endmacro
                                 
                                 ; Macro to send a register to display its integer value on the LCD
                                 ; Usage Example: LCD_send_a_register r16
                                 .macro LCD_send_a_register
                                 	PUSH r15
                                 	PUSH r16
                                 	PUSH r17
                                 	PUSH r18
                                 	PUSH r19
                                 	PUSH r28
                                 	PUSH r29
                                 	PUSH r30
                                 
                                 	MOV r16,@0			; receives the register
                                 	mov r19, r16		; take backup of origional value to r19
                                 	
                                 	; Convert the 8-bit (0-255) integer to ASCII encoded integer
                                 	; by simply spliting it and adding 48 to its individual digits then
                                 	; print those individual digits to LCD
                                 
                                 	; Split the integer into individual digits
                                 	ldi r28, 0          ; Initialize r28 (ones place) to 0
                                 	ldi r29, 0          ; Initialize r29 (tens place) to 0
                                 	ldi r30, 0          ; Initialize r30 (hundreds place) to 0
                                 
                                 	; Ones place
                                 	ldi r17, 10         ; Load divisor (10) into r17
                                 	div					; Divide r16 by 10, result in r16, remainder in r15
                                 	mov r28, r15        ; Move remainder (ones place) to r28
                                 
                                 	; Tens place
                                 	ldi r17, 10         ; Load divisor (10) into r17
                                 	div			        ; Divide r16 by 10, result in r16, remainder in r15
                                 	mov r29, r15        ; Move remainder (tens place) to r29
                                 
                                 	; Hundreds place
                                 	ldi r17, 10         ; Load divisor (10) into r17
                                 	div			        ; Divide r16 by 10, result in r16, remainder in r15
                                 	mov r30, r15        ; Move remainder (hundreds place) to r30
                                 
                                 	; Now r28 has the ones place, r29 has the tens place, and r30 has the hundreds place
                                 	; e.g. integer 235 will split into --> r30=2 , r29=3 , r28=5
                                 
                                 	LDI r18, 0	; counter for the loop logic
                                 	LDI r17, 48 ; 48 will be added to each digit to encode it to ASCII integer
                                 	
                                 	; loop to send all 3 register r30, r29 and r28 to LCD one by one
                                 	LCD_send_a_register_writing:
                                 	cpi r18, 0
                                 	BREQ LCD_send_a_register_writing_L1
                                 	cpi r18, 1
                                 	BREQ LCD_send_a_register_writing_L2
                                 	cpi r18, 2
                                 	BREQ LCD_send_a_register_writing_L3
                                 	rjmp LCD_send_a_register_writing_end
                                 
                                 	; sending r30 to LCD
                                 	LCD_send_a_register_writing_L1:
                                 	CPI r19, 100
                                 	BRLO LCD_send_a_register_writing_skip_temp	; if the origional number was from 0 to 99, then skip sending r30 to LCD
                                 	add r30, r17
                                 	mov r16, r30
                                 	rjmp LCD_send_a_register_writing_start
                                 
                                 	; sending r29 to LCD
                                 	LCD_send_a_register_writing_L2:
                                 	CPI r19, 10
                                 	BRLO LCD_send_a_register_writing_skip_temp	; if the origional number was from 0 to 9, then skip sending r29 as well
                                 	add r29, r17
                                 	mov r16, r29
                                 	rjmp LCD_send_a_register_writing_start
                                 
                                 	; sending r28 to LCD
                                 	LCD_send_a_register_writing_L3:
                                 	add r28, r17
                                 	mov r16, r28
                                 	rjmp LCD_send_a_register_writing_start
                                 
                                 	LCD_send_a_register_writing_start:
                                 	; Clear the pins
                                 	CBI PORTD, PD7         ; Clear PD7
                                 	CBI PORTD, PD6         ; Clear PD6
                                 	CBI PORTD, PD5         ; Clear PD5
                                 	CBI PORTD, PD4         ; Clear PD4
                                 	SBI PORTB, PB0         ; Set RS pin to HIGH (set LCD mode to "Data Mode")
                                 	; Send the upper 4 bits of the Register to LCD
                                 	SBRC r16, 7            ; Check the MSB (7th bit)
                                 	SBI PORTD, PD7         ; Set PD7 according to the data bit
                                 	SBRC r16, 6            ; Check the 6th bit
                                 	SBI PORTD, PD6         ; Set PD6 according to the data bit
                                 	SBRC r16, 5            ; Check the 5th bit
                                 	SBI PORTD, PD5         ; Set PD5 according to the data bit
                                 	SBRC r16, 4            ; Check the 4th bit
                                 	SBI PORTD, PD4         ; Set PD4 according to the data bit
                                 
                                 	SBI PORTB, PB1         ; Set E pin to HIGH (set LCD to receive the data)
                                 	delay 10
                                 	CBI PORTB, PB1         ; Set E pin to LOW (set LCD to process the data)
                                 
                                 	RJMP LCD_send_a_register_writing_skip_temp_end
                                 	LCD_send_a_register_writing_skip_temp:
                                 	RJMP LCD_send_a_register_writing_skip
                                 	LCD_send_a_register_writing_skip_temp_end:
                                 
                                 	; Clear the pins
                                 	CBI PORTD, PD7         ; Clear PD7
                                 	CBI PORTD, PD6         ; Clear PD6
                                 	CBI PORTD, PD5         ; Clear PD5
                                 	CBI PORTD, PD4         ; Clear PD4
                                 
                                 	; Send the lower 4 bits of the Register to LCD
                                 	SBRC r16, 3            ; Check the 3rd bit
                                 	SBI PORTD, PD7         ; Set PD7 according to the data bit
                                 	SBRC r16, 2            ; Check the 2nd bit
                                 	SBI PORTD, PD6         ; Set PD6 according to the data bit
                                 	SBRC r16, 1            ; Check the 1st bit
                                 	SBI PORTD, PD5         ; Set PD5 according to the data bit
                                 	SBRC r16, 0            ; Check the 0th bit
                                 	SBI PORTD, PD4         ; Set PD4 according to the data bit
                                 
                                 	SBI PORTB, PB1         ; Set E pin to HIGH (set LCD to receive the data)
                                 	delay 10
                                 	CBI PORTB, PB1         ; Set E pin to LOW (set LCD to process the data)
                                 
                                 	; Clear the pins
                                 	CBI PORTD, PD7         ; Clear PD7
                                 	CBI PORTD, PD6         ; Clear PD6
                                 	CBI PORTD, PD5         ; Clear PD5
                                 	CBI PORTD, PD4         ; Clear PD4
                                 	
                                 	LCD_send_a_register_writing_skip:
                                 	INC r18
                                 	rjmp LCD_send_a_register_writing
                                 
                                 	LCD_send_a_register_writing_end:
                                 	POP r30
                                 	POP r29
                                 	POP r28
                                 	POP r19
                                 	POP r18
                                 	POP r17
                                 	POP r16
                                 	POP r15
                                 .endmacro
                                 
                                 
                                 ; Macro to send a string (length <256) to display on the LCD
                                 ; the Z register pair should have the address of the buffer
                                 ; r20 should have the length of the buffer
                                 ;	For example:	
                                 ;	LDI ZL, LOW (2 * hello_string)
                                 ;	LDI ZH, HIGH (2 * hello_string)
                                 ;	LDI r20, string_len
                                 ;	
                                 ; it is recommanded to define the constants (arrays, strings, etc.) at the end of the code segment
                                 ; .db directive is used to declare constants
                                 ;
                                 ;		hello_string:	.db	"Hello World",0
                                 ;		len: .equ	string_len   = (2 * (len - hello_string)) - 1
                                 ;
                                 ;	Note: the string length should be in even numbers, if your string length is
                                 ;		  in odd numbers then add an extra space at the end of the string
                                 ;		  to make overall string length to even number.
                                 .macro LCD_send_a_string
                                 	; save the states of R16 and R17
                                 	PUSH            R16
                                 	PUSH            R17
                                 	PUSH			R20
                                 
                                 	LCD_writeBuffer_LOOP:
                                 		; load the current byte/character pointed to be Z and increment the Z pointer
                                 		LPM             r16, Z+
                                 		; check if the remaining size of the string is non-zero and return if it is
                                 		CPI             r20, 0
                                 		BREQ            LCD_writeBuffer_END
                                 		LCD_writeBuffer_CHAR:
                                 	
                                 		; Send the string character to the LCD
                                 		; Clear the pins
                                 		CBI PORTD, PD7         ; Clear PD7
                                 		CBI PORTD, PD6         ; Clear PD6
                                 		CBI PORTD, PD5         ; Clear PD5
                                 		CBI PORTD, PD4         ; Clear PD4
                                 		SBI PORTB, PB0         ; Set RS pin to HIGH (set LCD mode to "Data Mode")
                                 		; Send the upper 4 bits of the Register to LCD
                                 		SBRC r16, 7            ; Check the MSB (7th bit)
                                 		SBI PORTD, PD7         ; Set PD7 according to the data bit
                                 		SBRC r16, 6            ; Check the 6th bit
                                 		SBI PORTD, PD6         ; Set PD6 according to the data bit
                                 		SBRC r16, 5            ; Check the 5th bit
                                 		SBI PORTD, PD5         ; Set PD5 according to the data bit
                                 		SBRC r16, 4            ; Check the 4th bit
                                 		SBI PORTD, PD4         ; Set PD4 according to the data bit
                                 
                                 		SBI PORTB, PB1         ; Set E pin to HIGH (set LCD to receive the data)
                                 		delay 10
                                 		CBI PORTB, PB1         ; Set E pin to LOW (set LCD to process the data)
                                 
                                 		; Clear the pins
                                 		CBI PORTD, PD7         ; Clear PD7
                                 		CBI PORTD, PD6         ; Clear PD6
                                 		CBI PORTD, PD5         ; Clear PD5
                                 		CBI PORTD, PD4         ; Clear PD4
                                 
                                 		; Send the lower 4 bits of the Register to LCD
                                 		SBRC r16, 3            ; Check the 3rd bit
                                 		SBI PORTD, PD7         ; Set PD7 according to the data bit
                                 		SBRC r16, 2            ; Check the 2nd bit
                                 		SBI PORTD, PD6         ; Set PD6 according to the data bit
                                 		SBRC r16, 1            ; Check the 1st bit
                                 		SBI PORTD, PD5         ; Set PD5 according to the data bit
                                 		SBRC r16, 0            ; Check the 0th bit
                                 		SBI PORTD, PD4         ; Set PD4 according to the data bit
                                 
                                 		SBI PORTB, PB1         ; Set E pin to HIGH (set LCD to receive the data)
                                 		delay 10
                                 		CBI PORTB, PB1         ; Set E pin to LOW (set LCD to process the data)
                                 
                                 		DEC r20
                                 	RJMP            LCD_writeBuffer_LOOP
                                 	LCD_writeBuffer_END:
                                 
                                 	LCD_send_a_command 0x0C ; screen on, Cursor off 
                                 	; restore the states of R16 and R17 and return
                                 	POP				R20
                                 	POP             R17
                                 	POP             R16
                                 .endmacro
                                 
                                 
                                 ; Macro to divide two 8-bit integers
                                 .macro div
                                 ;***************************************************************************
                                 ;* "div8u" - 8/8 Bit Unsigned Division
                                 ;*
                                 ;* This macro divides the two register variables "r16" (dividend) and
                                 ;* "r17" (divisor).
                                 ;* The result (quotient) is placed in "r16" and the remainder in "r15".
                                 ;*
                                 ;***************************************************************************
                                 ; Input:
                                 ;		r16		; dividend
                                 ;		r17		; divisor
                                 ; Output:
                                 ;		r15		; remainder
                                 ;		r16		; quotient
                                 	PUSH r18
                                 
                                 	div8u:
                                 	sub r15,r15		;clear remainder and carry
                                 	ldi r18,9		;init loop counter
                                 	d8u_1:
                                 	rol r16			;shift left dividend
                                 	dec r18			;decrement counter
                                 	brne d8u_2		;if done
                                 	rjmp exit		;return
                                 	d8u_2:
                                 	rol r15			;shift dividend into remainder
                                 	sub r15,r17		;remainder = remainder - divisor
                                 	brcc d8u_3		;if result negative
                                 	add r15,r17		;restore remainder
                                 	clc				;clear carry to be shifted into result
                                 	rjmp d8u_1		;else
                                 	d8u_3:
                                 	sec				;set carry to be shifted into result
                                 	rjmp d8u_1
                                 	exit:
                                 
                                 	POP r18
                                 .endmacro
                                 .include "UART_Macros.inc"
                                 
                                 ; UART Serial Read/Write Macros
                                 ;-------------------------------------------
                                 
                                 ; [List of all the available macros in this file]
                                 ;	Serial_begin
                                 ;	Serial_writeChar
                                 ;	Serial_writeReg
                                 ;	Serial_writeReg_ASCII
                                 ;	Serial_writeNewLine
                                 ;	Serial_writeStr
                                 ;	Serial_writeBuffer
                                 ;	Serial_writeBuffer_ASCII
                                 ;	Serial_read
                                 ;	Serial_readStr		pending
                                 
                                 
                                 
                                 ; Macro to initializes the UART to 9600 BAUD at a frequency of 16 MHz (for Arduino UNO ATmega328p)
                                 ; Inputs: none
                                 ; Outputs: none
                                 ; Working: Initilize the UART protocol
                                 ; Registers modified: r16.r17
                                 .macro Serial_begin
                                 	.equ            F_CPU           = 16000000		; 16Mhz
                                 	.equ            BAUD_RATE       = 9600
                                 	.equ            BAUD_PRESCALER  = (F_CPU/(BAUD_RATE * 16)) - 1  ; 103
                                 	; save the states of R16 and R17
                                 	PUSH            R16
                                 	PUSH            R17
                                 	; initialize UART to 9600 baud
                                 	LDI             R16, LOW(BAUD_PRESCALER)
                                 	LDI             R17, HIGH(BAUD_PRESCALER)
                                 	STS             UBRR0L, R16
                                 	STS             UBRR0H, R17
                                 	; enable transmitter and reciever modes
                                 	LDI             R16, (1<<TXEN0)|(1<<RXEN0)
                                 	STS             UCSR0B, R16
                                 	; set parity to none and 8 data bits, etc.
                                 	LDI             R16, (1<<UCSZ01)|(1<<UCSZ00)
                                 	STS             UCSR0C, R16
                                 	; restore the states of R16 and R17 and return
                                 	POP             R17
                                 	POP             R16
                                 .endmacro
                                 
                                 
                                 ; Macro to writes a single character (single byte) to the UART
                                 ; Inputs: an ASCII character as argument
                                 ; Outputs: none
                                 ; Working: sends that ASCII value of the character to the UART
                                 ; Registers modified: r16
                                 .macro Serial_writeChar
                                 	; save the state of R16
                                 	PUSH            R16
                                 	Serial_writeChar_LOOP:
                                 	; wait for the write buffer to become empty (bit UDRE0 of UCSR0A register should be set)
                                 	LDS             R16, UCSR0A
                                 	SBRS            R16, UDRE0
                                 	RJMP            Serial_writeChar_LOOP
                                 	; copy the argument to the UDR0 register to be sent out
                                 	LDI				R16, @0
                                 	STS             UDR0, R16
                                 	; restore the state of R16 and return
                                 	POP             R16
                                 .endmacro
                                 
                                 
                                 ; Macro to writes a single 8-bit register's raw value to the UART
                                 ; Inputs: register as argument
                                 ; Outputs: none
                                 ; Working: sends the raw value of the register to the UART
                                 ; Registers modified: r16
                                 .macro Serial_writeReg
                                 	PUSH r16
                                 		
                                 	; wait for the write buffer to become empty (bit UDRE0 of UCSR0A register should be set)
                                 	PUSH r16
                                 	Serial_writeReg_LOOP_1:
                                 	LDS             R16, UCSR0A
                                 	SBRS            R16, UDRE0
                                 	RJMP            Serial_writeReg_LOOP_1
                                 	POP r16
                                 	; Load r16 register value into data register (UDR0) to send to UART
                                 	mov R16, @0	
                                 	sts UDR0, R16
                                 	; wait for the write buffer to become empty (bit UDRE0 of UCSR0A register should be set)
                                 	PUSH r16
                                 	Serial_writeReg_LOOP_2:
                                 	LDS             R16, UCSR0A
                                 	SBRS            R16, UDRE0
                                 	RJMP            Serial_writeReg_LOOP_2
                                 	POP r16
                                 
                                 	POP r16
                                 .endmacro
                                 
                                 
                                 ; Macro to writes a single 8-bit register's ASCII-encoded value to the UART
                                 ; Inputs: register as argument
                                 ; Outputs: none
                                 ; Working: sends the ASCII-encoded value of the register to the UART
                                 .macro Serial_writeReg_ASCII
                                 	PUSH r15
                                 	PUSH r16
                                 	PUSH r17
                                 	PUSH r18
                                 	PUSH r19
                                 	PUSH r28
                                 	PUSH r29
                                 	PUSH r30
                                 
                                 	; Load the received value into r16
                                 	mov R16, @0
                                 	mov r19, r16	; take backup of origional value to r19
                                 
                                 	PUSH r16
                                 	Serial_writeReg_ASCII_LOOP:
                                 	; wait for the write buffer to become empty (bit UDRE0 of UCSR0A register should be set)
                                 	LDS             R16, UCSR0A
                                 	SBRS            R16, UDRE0
                                 	RJMP            Serial_writeReg_ASCII_LOOP
                                 	POP r16
                                 
                                 	; Convert the 8-bit (0-255) integer to ASCII encoded integer
                                 	; by simply spliting it and adding 48 to its individual digits then
                                 	; send those individual digits to UART
                                 
                                 	; Split the integer into individual digits
                                 	ldi r28, 0          ; Initialize r28 (ones place) to 0
                                 	ldi r29, 0          ; Initialize r29 (tens place) to 0
                                 	ldi r30, 0          ; Initialize r30 (hundreds place) to 0
                                 
                                 	; Ones place
                                 	ldi r17, 10         ; Load divisor (10) into r17
                                 	div					; Divide r16 by 10, result in r16, remainder in r15
                                 	mov r28, r15        ; Move remainder (ones place) to r28
                                 
                                 	; Tens place
                                 	ldi r17, 10         ; Load divisor (10) into r17
                                 	div			        ; Divide r16 by 10, result in r16, remainder in r15
                                 	mov r29, r15        ; Move remainder (tens place) to r29
                                 
                                 	; Hundreds place
                                 	ldi r17, 10         ; Load divisor (10) into r17
                                 	div			        ; Divide r16 by 10, result in r16, remainder in r15
                                 	mov r30, r15        ; Move remainder (hundreds place) to r30
                                 
                                 	; Now r28 has the ones place, r29 has the tens place, and r30 has the hundreds place
                                 	; e.g. integer 235 will split into --> r30=2 , r29=3 , r28=5
                                 
                                 	LDI r18, 0	; counter for the loop logic
                                 	LDI r17, 48 ; 48 will be added to each digit to encode it to ASCII integer
                                 	
                                 	; loop to send all 3 register r30, r29 and r28 to UART one by one
                                 	Serial_writeReg_ASCII_writing:	
                                 	cpi r18, 0
                                 	BREQ Serial_writeReg_ASCII_writing_L1
                                 	cpi r18, 1
                                 	BREQ Serial_writeReg_ASCII_writing_L2
                                 	cpi r18, 2
                                 	BREQ Serial_writeReg_ASCII_writing_L3
                                 	rjmp Serial_writeReg_ASCII_writing_end
                                 
                                 	; sending r30 to UART
                                 	Serial_writeReg_ASCII_writing_L1:
                                 	CPI r19,100
                                 	BRLO Serial_writeReg_ASCII_writing_skip	; if the origional number was from 0 to 99, then skip sending r30 to UART
                                 	add r30, r17
                                 	mov r16, r30
                                 	rjmp Serial_writeReg_ASCII_writing_start
                                 
                                 	; sending r29 to UART
                                 	Serial_writeReg_ASCII_writing_L2:
                                 	CPI r19,10
                                 	BRLO Serial_writeReg_ASCII_writing_skip	; if the origional number was from 0 to 9, then skip sending r29 as well
                                 	add r29, r17
                                 	mov r16, r29
                                 	rjmp Serial_writeReg_ASCII_writing_start
                                 
                                 	; sending r28 to UART
                                 	Serial_writeReg_ASCII_writing_L3:
                                 	add r28, r17
                                 	mov r16, r28
                                 	rjmp Serial_writeReg_ASCII_writing_start
                                 
                                 	Serial_writeReg_ASCII_writing_start:
                                 		; wait for the write buffer to become empty (bit UDRE0 of UCSR0A register should be set)
                                 		PUSH r16
                                 		Serial_writeReg_ASCII_LOOP_1:
                                 		LDS             R16, UCSR0A
                                 		SBRS            R16, UDRE0
                                 		RJMP            Serial_writeReg_ASCII_LOOP_1
                                 		POP r16
                                 		; Load r16 register value into data register (UDR0) to send to UART
                                 		sts UDR0, R16
                                 		; wait for the write buffer to become empty (bit UDRE0 of UCSR0A register should be set)
                                 		PUSH r16
                                 		Serial_writeReg_ASCII_LOOP_2:
                                 		LDS             R16, UCSR0A
                                 		SBRS            R16, UDRE0
                                 		RJMP            Serial_writeReg_ASCII_LOOP_2
                                 		POP r16
                                 	
                                 	Serial_writeReg_ASCII_writing_skip:
                                 	INC r18
                                 	rjmp Serial_writeReg_ASCII_writing
                                 
                                 	Serial_writeReg_ASCII_writing_end:
                                 	POP r30
                                 	POP r29
                                 	POP r28
                                 	POP r19
                                 	POP r18
                                 	POP r17
                                 	POP r16
                                 	POP r15
                                 .endmacro
                                 
                                 
                                 ; Macro to writes a new line character to the UART
                                 ; Inputs: none
                                 ; Outputs: none
                                 ; Working: sends CRLF - carrage return (0x0D) and newline (0x0A) characters to the UART
                                 ; Registers modified: r16
                                 .macro Serial_writeNewLine
                                 	; save the state of R16
                                 	PUSH            R16
                                 	Serial_writeNewLine_LOOP1:
                                 	; wait for the write buffer to become empty (bit UDRE0 of UCSR0A register should be set)
                                 	LDS             R16, UCSR0A
                                 	SBRS            R16, UDRE0
                                 	RJMP            Serial_writeNewLine_LOOP1
                                 	; move value 0x0D (\r) to the UDR0 register to be sent out
                                 	LDI				R16, 0x0D
                                 	STS             UDR0, R16
                                 	Serial_writeNewLine_LOOP2:
                                 	; wait for the write buffer to become empty (bit UDRE0 of UCSR0A register should be set)
                                 	LDS             R16, UCSR0A
                                 	SBRS            R16, UDRE0
                                 	RJMP            Serial_writeNewLine_LOOP2
                                 	; move value 0x0A (\n) to the UDR0 register to be sent out
                                 	LDI				R16, 0x0A
                                 	STS             UDR0, R16
                                 	; restore the state of R16 and return
                                 	POP             R16
                                 .endmacro
                                 
                                 
                                 ; Macro to writes a NULL terminated string to the UART 
                                 ; Inputs: ZH:ZL - SRAM buffer address from where to the string is stored
                                 ; Outputs: none
                                 ; Working: sends the string via UART
                                 ; Registers modified: r16,r17,Z
                                 ;
                                 ;	For example:	
                                 ;		LDI ZL, LOW (2 * hello_string)
                                 ;		LDI ZH, HIGH (2 * hello_string)
                                 ;		Serial_writeStr
                                 ;	
                                 ;	It is recommanded to define the constent strings at the end of the code segment.
                                 ;	Optionally you can use CRLF (carriage return/line feed) characters 0x0D and 0x0A at the end of the string
                                 ;	the string should be terminated with 0.
                                 ;	The overall length of the string (including CRLF and ending zero) must be even number of bytes.
                                 ;	e.g.	
                                 ;			hello_string:	.db	"Hello World",0x0D,0x0A,0
                                 ;	
                                 ;	.db directive is used to decalre constants
                                 ;
                                 ;	Note: the string length should be in even numbers, if your string length is
                                 ;		  in odd numbers then add an extra space at the end of the string
                                 ;		  to make overall string length to even number.
                                 ;
                                 .macro Serial_writeStr
                                 	; save the states of R16 and R17
                                 	PUSH            R16
                                 	PUSH            R17
                                 	Serial_writeStr_LOOP:
                                 	; load the current byte/character pointed to be Z and increment the Z pointer
                                 	LPM             R16, Z+
                                 	; if the current character is 0/NULL, return from the routine since the string has been used
                                 	CPI             R16, 0
                                 	BREQ            Serial_writeStr_END
                                 	Serial_writeStr_CHAR:
                                 	; wait for the write buffer to become empty (bit UDRE0 of UCSR0A register should be set)
                                 	LDS             R17, UCSR0A
                                 	SBRS            R17, UDRE0
                                 	RJMP            Serial_writeStr_CHAR
                                 	; copy the current character to the UDR0 register to send it out and jump back to the start
                                 	STS             UDR0, R16
                                 	RJMP            Serial_writeStr_LOOP
                                 	Serial_writeStr_END:
                                 	; restore the states of R16 and R17 and return
                                 	POP             R17
                                 	POP             R16
                                 .endmacro
                                 
                                 
                                 ; Macro to writes a buffer (constant integer array, etc.) of a given length (<256 bytes) to the UART
                                 ; Inputs: ZH:ZL - SRAM buffer address from where to the sending data is placed
                                 ;		  r20 should have the length of the buffer
                                 ; Outputs: none
                                 ; Working: sends the buffer via UART
                                 ; Registers modified: r16,r17,r20,Z
                                 ;
                                 ;For example:	
                                 ;		LDI ZL, LOW (2 * hello_buffer)
                                 ;		LDI ZH, HIGH (2 * hello_buffer)
                                 ;		LDI r20, buffer_len
                                 ;	
                                 ;	it is recommanded to define the buffer at the end of the code segment
                                 ;		hello_buffer:	.db	1,2,3,4,5,6
                                 ;		len: .equ	buffer_len   = 2 * (len - hello_buffer)
                                 ;
                                 ;	.db directive is used to decalre constants
                                 ;
                                 ;	Note: the string length should be in even numbers, if your string length is
                                 ;		  in odd numbers then add an extra space at the end of the string
                                 ;		  to make overall string length to even number.
                                 ;
                                 .macro Serial_writeBuffer
                                 	; save the states of R16, R17 and r20
                                 	PUSH            R16
                                 	PUSH            R17
                                 	PUSH			R20
                                 	Serial_writeBuffer_LOOP:
                                 	; load the current byte pointed to be Z and increment the Z pointer
                                 	LPM             R16, Z+
                                 	; check if the remaining size of the buffer is non-zero and return if it is
                                 	CPI             R20, 0
                                 	BREQ            Serial_writeBuffer_END
                                 	Serial_writeBuffer_CHAR:
                                 	; wait for the write buffer to become empty (bit UDRE0 of UCSR0A register should be set)
                                 	LDS             R17, UCSR0A
                                 	SBRS            R17, UDRE0
                                 	RJMP            Serial_writeBuffer_CHAR
                                 	; copy the current character to the UDR0 register to send it out and jump back to the start
                                 	STS             UDR0, R16
                                 	DEC             R20
                                 	RJMP            Serial_writeBuffer_LOOP
                                 	Serial_writeBuffer_END:
                                 	; restore the states of R16, R17 and r20
                                 	POP				R20
                                 	POP             R17
                                 	POP             R16
                                 .endmacro
                                 
                                 
                                 ; Macro to writes an ASCII-encoded buffer (constant integer array, etc.) of a given length (<256 bytes) to the UART
                                 ; Inputs: ZH:ZL - SRAM buffer address from where to the sending data is placed
                                 ;		  r20 should have the length of the buffer
                                 ; Outputs: none
                                 ; Working: sends the buffer via UART
                                 ; Registers modified: r16,r17,r20,Z
                                 ;
                                 ;For example:	
                                 ;		LDI ZL, LOW (2 * hello_buffer)
                                 ;		LDI ZH, HIGH (2 * hello_buffer)
                                 ;		LDI r20, buffer_len
                                 ;	
                                 ;	it is recommanded to define the buffer at the end of the code segment
                                 ;		hello_buffer:	.db	1,2,3,4,5,6
                                 ;		len: .equ	buffer_len   = 2 * (len - hello_buffer)
                                 ;
                                 ;	.db directive is used to decalre constants
                                 ;
                                 ;	Note: the string length should be in even numbers, if your string length is
                                 ;		  in odd numbers then add an extra space at the end of the string
                                 ;		  to make overall string length to even number.
                                 ;
                                 .macro Serial_writeBuffer_ASCII
                                 	; save the states of R16, R17 and r20
                                 	PUSH            R16
                                 	PUSH            R17
                                 	PUSH			R18
                                 	PUSH			R20
                                 
                                 	LDI r18, 48 ; 48 will be added to each digit to encode it to ASCII integer
                                 
                                 	Serial_writeBuffer_LOOP:
                                 	; load the current byte pointed to be Z and increment the Z pointer
                                 	LPM             R16, Z+
                                 	add r16, r18		; convert to ASCII encoded integer
                                 	; check if the remaining size of the buffer is non-zero and return if it is
                                 	CPI             R20, 0
                                 	BREQ            Serial_writeBuffer_END
                                 	Serial_writeBuffer_CHAR:
                                 	; wait for the write buffer to become empty (bit UDRE0 of UCSR0A register should be set)
                                 	LDS             R17, UCSR0A
                                 	SBRS            R17, UDRE0
                                 	RJMP            Serial_writeBuffer_CHAR
                                 	; copy the current character to the UDR0 register to send it out and jump back to the start
                                 	STS             UDR0, R16
                                 	DEC             R20
                                 	RJMP            Serial_writeBuffer_LOOP
                                 	Serial_writeBuffer_END:
                                 	; restore the states of R16, R17 and r20
                                 	POP				R20
                                 	POP				R18
                                 	POP             R17
                                 	POP             R16
                                 .endmacro
                                 
                                 
                                 ; Macro to read a single byte from the UART
                                 ; Inputs: register to hold the received byte
                                 ; Outputs: r16
                                 ; Working: receives byte via UART and stores in a r16 register
                                 .macro Serial_read
                                 
                                 	;Serial_read_WAIT:
                                 	; wait till a byte is in the buffer
                                 	LDS             R16, UCSR0A
                                 	SBRS            R16, RXC0
                                 	RJMP            Serial_read_Skip
                                 	;RJMP            Serial_read_WAIT
                                 
                                 	Serial_read_Start:
                                 	; read the byte
                                 	LDS             r16, UDR0
                                 
                                 	rjmp Serial_read_END
                                 	Serial_read_Skip:
                                 	LDI				r16,0
                                 	Serial_read_END:
                                 .endmacro
                                 
                                 
                                 ; Macro to receive a string from the UART and store in variable (array)
                                 ; Inputs: ZH:ZL - SRAM buffer address for received string
                                 ; Outputs: r16 will contain 0 if no data received
                                 ; Working: receives string via UART and stores in data memory until carriage return (0x0D) received
                                 ; Registers modified: r16, r17, XL, XH
                                 ;
                                 ;	For example:
                                 ;		.dseg
                                 ;		.org SRAM_START
                                 ;			buffer:	.byte	20		; 20 bytes reserved
                                 ;		.cseg
                                 ;		.org 0x0000
                                 ;			LDI ZL, LOW (buffer)
                                 ;			LDI ZH, HIGH (buffer)
                                 ;			Serial_readStr
                                 ;
                                 .macro Serial_readStr
                                 	; save the state of R17
                                 	PUSH			R17
                                 	
                                 	;Serial_readStr_WAIT:
                                 	; wait till a byte is in the buffer
                                 	LDS             r16, UCSR0A
                                 	SBRS            r16, RXC0
                                 	RJMP            Serial_readStr_Skip
                                 	;RJMP            Serial_readStr_WAIT
                                 
                                 	Serial_readStr_Start:
                                 	lds		r16, UDR0				; get received character
                                 
                                 	cpi		r16, 0x0D				; check if received char is CR
                                 	breq	Serial_readStr_END		; branch if CR received
                                 
                                 	st	Z+, r16						; store character to buffer
                                 	rjmp Serial_readStr_Start		; get another character
                                 
                                 
                                 	Serial_readStr_Skip:
                                 	LDI				r16, 0			; set r16 to 0 if there is no data on UART
                                 	rjmp Serial_readStr_Skip2
                                 	Serial_readStr_END:
                                 	LDI				r16, 1			; set r16 to 1 if data is received on UART
                                 	Serial_readStr_Skip2:
                                 	POP				R17
                                 .endmacro
                                 
                                 .dseg
                                 .org SRAM_START
000100                               countdown: .byte 1
                                 
                                 .cseg
                                 .org 0x0000
000000 9a54
000001 9a55
000002 9a56
000003 9a57
000004 9a20
000005 9a21
000006 9a25
000007 932f
000008 938f
000009 939f
00000a e025
00000b e38e
00000c e99c
00000d 9701
00000e f7f1
00000f 952a
000010 f7d1
000011 0000
000012 919f
000013 918f
000014 912f
000015 9828
000016 9829
000017 930f
000018 e003
000019 985f
00001a 985e
00001b 985d
00001c 985c
00001d 9828
00001e fd07
00001f 9a5f
000020 fd06
000021 9a5e
000022 fd05
000023 9a5d
000024 fd04
000025 9a5c
000026 9a29
000027 932f
000028 938f
000029 939f
00002a e021
00002b e38e
00002c e99c
00002d 9701
00002e f7f1
00002f 952a
000030 f7d1
000031 0000
000032 919f
000033 918f
000034 912f
000035 9829
000036 985f
000037 985e
000038 985d
000039 985c
00003a fd03
00003b 9a5f
00003c fd02
00003d 9a5e
00003e fd01
00003f 9a5d
000040 fd00
000041 9a5c
000042 9a29
000043 932f
000044 938f
000045 939f
000046 e021
000047 e38e
000048 e99c
000049 9701
00004a f7f1
00004b 952a
00004c f7d1
00004d 0000
00004e 919f
00004f 918f
000050 912f
000051 9829
000052 985f
000053 985e
000054 985d
000055 985c
000056 910f
000057 932f
000058 938f
000059 939f
00005a e020
00005b e38e
00005c e99c
00005d 9701
00005e f7f1
00005f 952a
000060 f7d1
000061 0000
000062 919f
000063 918f
000064 912f
000065 930f
000066 e003
000067 985f
000068 985e
000069 985d
00006a 985c
00006b 9828
00006c fd07
00006d 9a5f
00006e fd06
00006f 9a5e
000070 fd05
000071 9a5d
000072 fd04
000073 9a5c
000074 9a29
000075 932f
000076 938f
000077 939f
000078 e021
000079 e38e
00007a e99c
00007b 9701
00007c f7f1
00007d 952a
00007e f7d1
00007f 0000
000080 919f
000081 918f
000082 912f
000083 9829
000084 985f
000085 985e
000086 985d
000087 985c
000088 fd03
000089 9a5f
00008a fd02
00008b 9a5e
00008c fd01
00008d 9a5d
00008e fd00
00008f 9a5c
000090 9a29
000091 932f
000092 938f
000093 939f
000094 e021
000095 e38e
000096 e99c
000097 9701
000098 f7f1
000099 952a
00009a f7d1
00009b 0000
00009c 919f
00009d 918f
00009e 912f
00009f 9829
0000a0 985f
0000a1 985e
0000a2 985d
0000a3 985c
0000a4 910f
0000a5 932f
0000a6 938f
0000a7 939f
0000a8 e020
0000a9 e38e
0000aa e99c
0000ab 9701
0000ac f7f1
0000ad 952a
0000ae f7d1
0000af 0000
0000b0 919f
0000b1 918f
0000b2 912f
0000b3 930f
0000b4 e003
0000b5 985f
0000b6 985e
0000b7 985d
0000b8 985c
0000b9 9828
0000ba fd07
0000bb 9a5f
0000bc fd06
0000bd 9a5e
0000be fd05
0000bf 9a5d
0000c0 fd04
0000c1 9a5c
0000c2 9a29
0000c3 932f
0000c4 938f
0000c5 939f
0000c6 e021
0000c7 e38e
0000c8 e99c
0000c9 9701
0000ca f7f1
0000cb 952a
0000cc f7d1
0000cd 0000
0000ce 919f
0000cf 918f
0000d0 912f
0000d1 9829
0000d2 985f
0000d3 985e
0000d4 985d
0000d5 985c
0000d6 fd03
0000d7 9a5f
0000d8 fd02
0000d9 9a5e
0000da fd01
0000db 9a5d
0000dc fd00
0000dd 9a5c
0000de 9a29
0000df 932f
0000e0 938f
0000e1 939f
0000e2 e021
0000e3 e38e
0000e4 e99c
0000e5 9701
0000e6 f7f1
0000e7 952a
0000e8 f7d1
0000e9 0000
0000ea 919f
0000eb 918f
0000ec 912f
0000ed 9829
0000ee 985f
0000ef 985e
0000f0 985d
0000f1 985c
0000f2 910f
0000f3 932f
0000f4 938f
0000f5 939f
0000f6 e020
0000f7 e38e
0000f8 e99c
0000f9 9701
0000fa f7f1
0000fb 952a
0000fc f7d1
0000fd 0000
0000fe 919f
0000ff 918f
000100 912f
000101 930f
000102 e002
000103 985f
000104 985e
000105 985d
000106 985c
000107 9828
000108 fd07
000109 9a5f
00010a fd06
00010b 9a5e
00010c fd05
00010d 9a5d
00010e fd04
00010f 9a5c
000110 9a29
000111 932f
000112 938f
000113 939f
000114 e021
000115 e38e
000116 e99c
000117 9701
000118 f7f1
000119 952a
00011a f7d1
00011b 0000
00011c 919f
00011d 918f
00011e 912f
00011f 9829
000120 985f
000121 985e
000122 985d
000123 985c
000124 fd03
000125 9a5f
000126 fd02
000127 9a5e
000128 fd01
000129 9a5d
00012a fd00
00012b 9a5c
00012c 9a29
00012d 932f
00012e 938f
00012f 939f
000130 e021
000131 e38e
000132 e99c
000133 9701
000134 f7f1
000135 952a
000136 f7d1
000137 0000
000138 919f
000139 918f
00013a 912f
00013b 9829
00013c 985f
00013d 985e
00013e 985d
00013f 985c
000140 910f
000141 930f
000142 e208
000143 985f
000144 985e
000145 985d
000146 985c
000147 9828
000148 fd07
000149 9a5f
00014a fd06
00014b 9a5e
00014c fd05
00014d 9a5d
00014e fd04
00014f 9a5c
000150 9a29
000151 932f
000152 938f
000153 939f
000154 e021
000155 e38e
000156 e99c
000157 9701
000158 f7f1
000159 952a
00015a f7d1
00015b 0000
00015c 919f
00015d 918f
00015e 912f
00015f 9829
000160 985f
000161 985e
000162 985d
000163 985c
000164 fd03
000165 9a5f
000166 fd02
000167 9a5e
000168 fd01
000169 9a5d
00016a fd00
00016b 9a5c
00016c 9a29
00016d 932f
00016e 938f
00016f 939f
000170 e021
000171 e38e
000172 e99c
000173 9701
000174 f7f1
000175 952a
000176 f7d1
000177 0000
000178 919f
000179 918f
00017a 912f
00017b 9829
00017c 985f
00017d 985e
00017e 985d
00017f 985c
000180 910f
000181 930f
000182 e00c
000183 985f
000184 985e
000185 985d
000186 985c
000187 9828
000188 fd07
000189 9a5f
00018a fd06
00018b 9a5e
00018c fd05
00018d 9a5d
00018e fd04
00018f 9a5c
000190 9a29
000191 932f
000192 938f
000193 939f
000194 e021
000195 e38e
000196 e99c
000197 9701
000198 f7f1
000199 952a
00019a f7d1
00019b 0000
00019c 919f
00019d 918f
00019e 912f
00019f 9829
0001a0 985f
0001a1 985e
0001a2 985d
0001a3 985c
0001a4 fd03
0001a5 9a5f
0001a6 fd02
0001a7 9a5e
0001a8 fd01
0001a9 9a5d
0001aa fd00
0001ab 9a5c
0001ac 9a29
0001ad 932f
0001ae 938f
0001af 939f
0001b0 e021
0001b1 e38e
0001b2 e99c
0001b3 9701
0001b4 f7f1
0001b5 952a
0001b6 f7d1
0001b7 0000
0001b8 919f
0001b9 918f
0001ba 912f
0001bb 9829
0001bc 985f
0001bd 985e
0001be 985d
0001bf 985c
0001c0 910f
0001c1 930f
0001c2 e001
0001c3 985f
0001c4 985e
0001c5 985d
0001c6 985c
0001c7 9828
0001c8 fd07
0001c9 9a5f
0001ca fd06
0001cb 9a5e
0001cc fd05
0001cd 9a5d
0001ce fd04
0001cf 9a5c
0001d0 9a29
0001d1 932f
0001d2 938f
0001d3 939f
0001d4 e021
0001d5 e38e
0001d6 e99c
0001d7 9701
0001d8 f7f1
0001d9 952a
0001da f7d1
0001db 0000
0001dc 919f
0001dd 918f
0001de 912f
0001df 9829
0001e0 985f
0001e1 985e
0001e2 985d
0001e3 985c
0001e4 fd03
0001e5 9a5f
0001e6 fd02
0001e7 9a5e
0001e8 fd01
0001e9 9a5d
0001ea fd00
0001eb 9a5c
0001ec 9a29
0001ed 932f
0001ee 938f
0001ef 939f
0001f0 e021
0001f1 e38e
0001f2 e99c
0001f3 9701
0001f4 f7f1
0001f5 952a
0001f6 f7d1
0001f7 0000
0001f8 919f
0001f9 918f
0001fa 912f
0001fb 9829
0001fc 985f
0001fd 985e
0001fe 985d
0001ff 985c
000200 910f
000201 932f
000202 938f
000203 939f
000204 e021
000205 e38e
000206 e99c
000207 9701
000208 f7f1
000209 952a
00020a f7d1
00020b 0000
00020c 919f
00020d 918f
00020e 912f
00020f 930f
000210 e006
000211 985f
000212 985e
000213 985d
000214 985c
000215 9828
000216 fd07
000217 9a5f
000218 fd06
000219 9a5e
00021a fd05
00021b 9a5d
00021c fd04
00021d 9a5c
00021e 9a29
00021f 932f
000220 938f
000221 939f
000222 e021
000223 e38e
000224 e99c
000225 9701
000226 f7f1
000227 952a
000228 f7d1
000229 0000
00022a 919f
00022b 918f
00022c 912f
00022d 9829
00022e 985f
00022f 985e
000230 985d
000231 985c
000232 fd03
000233 9a5f
000234 fd02
000235 9a5e
000236 fd01
000237 9a5d
000238 fd00
000239 9a5c
00023a 9a29
00023b 932f
00023c 938f
00023d 939f
00023e e021
00023f e38e
000240 e99c
000241 9701
000242 f7f1
000243 952a
000244 f7d1
000245 0000
000246 919f
000247 918f
000248 912f
000249 9829
00024a 985f
00024b 985e
00024c 985d
00024d 985c
00024e 910f                      LCD_init ; initilize the 16x2 LCD
00024f 982d                      LCD_backlight_OFF
000250 932f
000251 938f
000252 939f
000253 e322
000254 e38e
000255 e99c
000256 9701
000257 f7f1
000258 952a
000259 f7d1
00025a 0000
00025b 919f
00025c 918f
00025d 912f                      delay 500
00025e 9a2d                      LCD_backlight_ON
00025f 930f
000260 931f
000261 e607
000262 e010
000263 9300 00c4
000265 9310 00c5
000267 e108
000268 9300 00c1
00026a e006
00026b 9300 00c2
00026d 911f
00026e 910f                      Serial_begin        ; Initialize UART Communication
                                 
                                 ; Initialize countdown value
00026f e009                      LDI r16, 9
000270 9300 0100                 STS countdown, r16
                                 
                                 loop:
                                 	countdown_loop:
                                     ; Display countdown value on LCD
000272 930f
000273 e001
000274 985f
000275 985e
000276 985d
000277 985c
000278 9828
000279 fd07
00027a 9a5f
00027b fd06
00027c 9a5e
00027d fd05
00027e 9a5d
00027f fd04
000280 9a5c
000281 9a29
000282 932f
000283 938f
000284 939f
000285 e021
000286 e38e
000287 e99c
000288 9701
000289 f7f1
00028a 952a
00028b f7d1
00028c 0000
00028d 919f
00028e 918f
00028f 912f
000290 9829
000291 985f
000292 985e
000293 985d
000294 985c
000295 fd03
000296 9a5f
000297 fd02
000298 9a5e
000299 fd01
00029a 9a5d
00029b fd00
00029c 9a5c
00029d 9a29
00029e 932f
00029f 938f
0002a0 939f
0002a1 e021
0002a2 e38e
0002a3 e99c
0002a4 9701
0002a5 f7f1
0002a6 952a
0002a7 f7d1
0002a8 0000
0002a9 919f
0002aa 918f
0002ab 912f
0002ac 9829
0002ad 985f
0002ae 985e
0002af 985d
0002b0 985c
0002b1 910f
0002b2 932f
0002b3 938f
0002b4 939f
0002b5 e021
0002b6 e38e
0002b7 e99c
0002b8 9701
0002b9 f7f1
0002ba 952a
0002bb f7d1
0002bc 0000
0002bd 919f
0002be 918f
0002bf 912f                          LCD_clear        ; Clear the LCD
0002c0 930f
0002c1 e002
0002c2 985f
0002c3 985e
0002c4 985d
0002c5 985c
0002c6 9828
0002c7 fd07
0002c8 9a5f
0002c9 fd06
0002ca 9a5e
0002cb fd05
0002cc 9a5d
0002cd fd04
0002ce 9a5c
0002cf 9a29
0002d0 932f
0002d1 938f
0002d2 939f
0002d3 e021
0002d4 e38e
0002d5 e99c
0002d6 9701
0002d7 f7f1
0002d8 952a
0002d9 f7d1
0002da 0000
0002db 919f
0002dc 918f
0002dd 912f
0002de 9829
0002df 985f
0002e0 985e
0002e1 985d
0002e2 985c
0002e3 fd03
0002e4 9a5f
0002e5 fd02
0002e6 9a5e
0002e7 fd01
0002e8 9a5d
0002e9 fd00
0002ea 9a5c
0002eb 9a29
0002ec 932f
0002ed 938f
0002ee 939f
0002ef e021
0002f0 e38e
0002f1 e99c
0002f2 9701
0002f3 f7f1
0002f4 952a
0002f5 f7d1
0002f6 0000
0002f7 919f
0002f8 918f
0002f9 912f
0002fa 9829
0002fb 985f
0002fc 985e
0002fd 985d
0002fe 985c
0002ff 910f
000300 932f
000301 938f
000302 939f
000303 e021
000304 e38e
000305 e99c
000306 9701
000307 f7f1
000308 952a
000309 f7d1
00030a 0000
00030b 919f
00030c 918f
00030d 912f                          LCD_home       ; Move cursor to the beginning of the first line
00030e 9100 0100                     LDS r16, countdown
000310 92ff
000311 930f
000312 931f
000313 932f
000314 933f
000315 93cf
000316 93df
000317 93ef
000318 2f00
000319 2f30
00031a e0c0
00031b e0d0
00031c e0e0
00031d e01a
00031e 932f
00031f 18ff
000320 e029
000321 1f00
000322 952a
000323 f409
000324 c008
000325 1cff
000326 1af1
000327 f418
000328 0ef1
000329 9488
00032a cff6
00032b 9408
00032c cff4
00032d 912f
00032e 2dcf
00032f e01a
000330 932f
000331 18ff
000332 e029
000333 1f00
000334 952a
000335 f409
000336 c008
000337 1cff
000338 1af1
000339 f418
00033a 0ef1
00033b 9488
00033c cff6
00033d 9408
00033e cff4
00033f 912f
000340 2ddf
000341 e01a
000342 932f
000343 18ff
000344 e029
000345 1f00
000346 952a
000347 f409
000348 c008
000349 1cff
00034a 1af1
00034b f418
00034c 0ef1
00034d 9488
00034e cff6
00034f 9408
000350 cff4
000351 912f
000352 2def
000353 e020
000354 e310
000355 3020
000356 f029
000357 3021
000358 f041
000359 3022
00035a f059
00035b c04e
00035c 3634
00035d f148
00035e 0fe1
00035f 2f0e
000360 c008
000361 303a
000362 f120
000363 0fd1
000364 2f0d
000365 c003
000366 0fc1
000367 2f0c
000368 c000
000369 985f
00036a 985e
00036b 985d
00036c 985c
00036d 9a28
00036e fd07
00036f 9a5f
000370 fd06
000371 9a5e
000372 fd05
000373 9a5d
000374 fd04
000375 9a5c
000376 9a29
000377 932f
000378 938f
000379 939f
00037a e021
00037b e38e
00037c e99c
00037d 9701
00037e f7f1
00037f 952a
000380 f7d1
000381 0000
000382 919f
000383 918f
000384 912f
000385 9829
000386 c001
000387 c020
000388 985f
000389 985e
00038a 985d
00038b 985c
00038c fd03
00038d 9a5f
00038e fd02
00038f 9a5e
000390 fd01
000391 9a5d
000392 fd00
000393 9a5c
000394 9a29
000395 932f
000396 938f
000397 939f
000398 e021
000399 e38e
00039a e99c
00039b 9701
00039c f7f1
00039d 952a
00039e f7d1
00039f 0000
0003a0 919f
0003a1 918f
0003a2 912f
0003a3 9829
0003a4 985f
0003a5 985e
0003a6 985d
0003a7 985c
0003a8 9523
0003a9 cfab
0003aa 91ef
0003ab 91df
0003ac 91cf
0003ad 913f
0003ae 912f
0003af 911f
0003b0 910f
0003b1 90ff                          LCD_send_a_register r16
                                 
                                     ; Decrement countdown
0003b2 9100 0100                     LDS r16, countdown ; Load value from memory into register
0003b4 950a                          DEC r16            ; Decrement the register
0003b5 9300 0100                     STS countdown, r16 ; Store the updated value back to memory
                                 
                                     ; Delay for 1 second
0003b7 932f
0003b8 938f
0003b9 939f
0003ba e624
0003bb e38e
0003bc e99c
0003bd 9701
0003be f7f1
0003bf 952a
0003c0 f7d1
0003c1 0000
0003c2 919f
0003c3 918f
0003c4 912f                          delay 1000
                                 
                                     ; Check if countdown is complete
0003c5 9100 0100                     LDS r16, countdown ; Load value from memory into register
0003c7 3000                          CPI r16, 0         ; Compare the register with immediate value 0
0003c8 f009                          BREQ countdown_complete
                                 
0003c9 cea8                          RJMP countdown_loop
                                 
                                 countdown_complete:
0003ca e000                      	LDI r16, 0
0003cb 932f
0003cc 938f
0003cd 939f
0003ce ef2a
0003cf e38e
0003d0 e99c
0003d1 9701
0003d2 f7f1
0003d3 952a
0003d4 f7d1
0003d5 0000
0003d6 919f
0003d7 918f
0003d8 912f                          delay 2500
0003d9 930f
0003da e001
0003db 985f
0003dc 985e
0003dd 985d
0003de 985c
0003df 9828
0003e0 fd07
0003e1 9a5f
0003e2 fd06
0003e3 9a5e
0003e4 fd05
0003e5 9a5d
0003e6 fd04
0003e7 9a5c
0003e8 9a29
0003e9 932f
0003ea 938f
0003eb 939f
0003ec e021
0003ed e38e
0003ee e99c
0003ef 9701
0003f0 f7f1
0003f1 952a
0003f2 f7d1
0003f3 0000
0003f4 919f
0003f5 918f
0003f6 912f
0003f7 9829
0003f8 985f
0003f9 985e
0003fa 985d
0003fb 985c
0003fc fd03
0003fd 9a5f
0003fe fd02
0003ff 9a5e
000400 fd01
000401 9a5d
000402 fd00
000403 9a5c
000404 9a29
000405 932f
000406 938f
000407 939f
000408 e021
000409 e38e
00040a e99c
00040b 9701
00040c f7f1
00040d 952a
00040e f7d1
00040f 0000
000410 919f
000411 918f
000412 912f
000413 9829
000414 985f
000415 985e
000416 985d
000417 985c
000418 910f                      	LCD_send_a_command 0x01 ; clear the LCD
000419 932f
00041a 938f
00041b 939f
00041c e624
00041d e38e
00041e e99c
00041f 9701
000420 f7f1
000421 952a
000422 f7d1
000423 0000
000424 919f
000425 918f
000426 912f                      	delay 1000
                                 	; Sending Hello World to LCD character-by-character
                                 	
                                 	
                                 
                                 receive_text:
000427 9100 00c0
000429 ff07
00042a c003
00042b 9100 00c6
00042d c001
00042e e000                          Serial_read
00042f 3000                          CPI r16, 0
000430 f009                          BREQ loop2
000431 c001                      	rjmp display_text
                                 	loop2:
000432 cf97                      		rjmp countdown_complete
                                 
                                 display_text:
000433 930f
000434 2f00
000435 985f
000436 985e
000437 985d
000438 985c
000439 fd07
00043a 9a5f
00043b fd06
00043c 9a5e
00043d fd05
00043e 9a5d
00043f fd04
000440 9a5c
000441 9a28
000442 9a29
000443 932f
000444 938f
000445 939f
000446 e021
000447 e38e
000448 e99c
000449 9701
00044a f7f1
00044b 952a
00044c f7d1
00044d 0000
00044e 919f
00044f 918f
000450 912f
000451 9829
000452 985f
000453 985e
000454 985d
000455 985c
000456 fd03
000457 9a5f
000458 fd02
000459 9a5e
00045a fd01
00045b 9a5d
00045c fd00
00045d 9a5c
00045e 9a29
00045f 932f
000460 938f
000461 939f
000462 e021
000463 e38e
000464 e99c
000465 9701
000466 f7f1
000467 952a
000468 f7d1
000469 0000
00046a 919f
00046b 918f
00046c 912f
00046d 9829
00046e 985f
00046f 985e
000470 985d
000471 985c
000472 910f                      		LCD_send_a_reg_ASCII r16
000473 cfb3                      		RJMP receive_text ; Continue to receive more text
                                 ; Add an endless loop at the end if needed
                                 endless_loop:
000474 cfff                          RJMP endless_loop


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :   0 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:  20 r16: 174 r17:  19 r18: 167 r19:   5 r20:   0 
r21:   0 r22:   0 r23:   0 r24: 148 r25: 111 r26:   0 r27:   0 r28:   6 
r29:   6 r30:   6 r31:   0 
Registers used: 10 out of 35 (28.6%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   6 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   3 brcs  :   0 break :   0 breq  :   5 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 brlt  :   0 brmi  :   0 
brne  :  77 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   : 196 cbr   :   0 
clc   :   3 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   7 cpse  :   0 dec   :  41 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   1 jmp   :   0 
ld    :   0 ldd   :   0 ldi   : 140 lds   :   5 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :   9 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :  37 or    :   0 ori   :   0 out   :   0 pop   : 136 
push  : 136 rcall :   0 ret   :   0 reti  :   0 rjmp  :  23 rol   :   6 
ror   :   0 sbc   :   0 sbci  :   0 sbi   : 140 sbic  :   0 sbis  :   0 
sbiw  :  37 sbr   :   0 sbrc  : 104 sbrs  :   1 sec   :   3 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :   6 
sub   :   6 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 25 out of 113 (22.1%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0008ea   2282      0   2282   32768   7.0%
[.dseg] 0x000100 0x000101      0      1      1    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
